using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using CloudyWing.MoneyTrack.Tools.EntityGenerator.Options;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Humanizer;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Options;
using Oracle.ManagedDataAccess.Client;

namespace CloudyWing.MoneyTrack.Tools.EntityGenerator.ViewModels {
    public partial class SchemaPageViewModel : ObservableObject {
        private static readonly Dictionary<string, string> twoCharAcronymsMaps = new(StringComparer.OrdinalIgnoreCase) {
            ["ip"] = "IP",
            ["pk"] = "PK",
            ["io"] = "IO"
        };
        private readonly IOptionsMonitor<AppOptions> appOptions;
        private readonly TableCollection tables = new();
        private readonly string outputPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Codes", "FromSchema");
        private readonly TableLoader tableLoader;

        [ObservableProperty]
        private bool isAllChecked;

        [ObservableProperty]
        private ObservableCollection<CheckBoxTable> checkBoxTables = new();

        public SchemaPageViewModel(IOptionsMonitor<AppOptions> appOptions) {
            this.appOptions = appOptions;
            tableLoader = new SqlTableLoader(appOptions.CurrentValue.ConnectionString);
            tableLoader.LoadTables(tables, CheckBoxTables);

            appOptions.OnChange(x => {
                // 多執行緒修改 ObservableCollection 會有問題，所以要用 Dispatcher
                Application.Current.Dispatcher.InvokeAsync(() => {
                    tableLoader.LoadTables(tables, CheckBoxTables);
                });
            });

            Directory.CreateDirectory(outputPath);
        }

        public IEnumerable<string> CheckedTableNames => CheckBoxTables.Where(x => x.IsChecked).Select(x => x.Name.Replace("__", "_"));

        private static string FixName(string str) {
            bool needFix = str == str.ToUpper();

            IEnumerable<string> temps = str
                .Split('_')
                .Select(x => {
                    return twoCharAcronymsMaps.ContainsKey(x)
                        ? twoCharAcronymsMaps[x]
                        : needFix
                            ? ToTitleCase(x)
                            : x;
                });

            return string.Join("", temps);
        }

        private static string ToTitleCase(string str) {
            if (string.IsNullOrEmpty(str)) {
                return str;
            }

            return char.ToUpper(str[0]) + str[1..].ToLower();
        }

        [RelayCommand]
        private void CheckAll() {
            foreach (CheckBoxTable checkBox in CheckBoxTables) {
                checkBox.IsChecked = IsAllChecked;
            }
        }

        [RelayCommand]
        private async Task SubmitAsync() {
            try {
                foreach (string checkedTableName in CheckedTableNames) {
                    await CreateFileAsync(tables[checkedTableName]);
                }

                MessageBox.Show("檔案產生成功。");
            } catch (Exception ex) {
                MessageBox.Show($"檔案產生失敗，{ex.Message}。");
            }
        }

        private async Task CreateFileAsync(Table table) {
            StringBuilder builder = new();
            builder.AppendLine($@"//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Collections.Generic;

namespace {appOptions.CurrentValue.DefaultNamespaceForSchema} {{");

            if (table.ClassName != table.Name) {
                builder.AppendLine($"    [Table(\"{table.Name}\")]");
            }

            builder.AppendLine($"    public class {table.ClassName} {{");

            int i = 0;
            foreach (Column col in table.Columns) {
                if (table.IsPrimaryKeyColumn(col.PropertyName)) {
                    builder.AppendLine("        [Key]");
                }

                if (col.PropertyName != col.Name) {
                    builder.AppendLine($"        [Column(\"{col.Name}\")]");
                }
                builder.AppendLine($"        public {col.PropertyType}{CheckNullable(col)} {col.PropertyName} {{ get; set; }}");

                if (++i < table.Columns.Count) {
                    builder.AppendLine();
                }
            }

            builder.AppendLine("    }");
            builder.AppendLine("}");

            await File.WriteAllTextAsync(Path.Combine(outputPath, table.ClassName + ".cs"), builder.ToString());
        }

        private static string CheckNullable(Column col) {
            return col.IsNullable ? "?" : "";
        }

        public partial class CheckBoxTable : ObservableObject {
            [ObservableProperty]
            private string name = default!;

            [ObservableProperty]
            private bool isChecked;
        }

        private class Table {
            public string Name { get; set; } = default!;

            public string Schema { get; set; } = default!;

            public bool IsView { get; set; } = default!;

            public string ClassName => FixName(Name).Singularize(false);

            public List<Column> Columns { get; } = new List<Column>();

            public bool IsPrimaryKeyColumn(string columnName) {
                Column? column = Columns.FirstOrDefault(x => string.Compare(x.Name, columnName, true) == 0);
                return column is not null && column.IsPK;
            }

            public Column GetColumn(string columnName) {
                return Columns.Single(x => string.Compare(x.Name, columnName, true) == 0);
            }

            public Column this[string columnName] => GetColumn(columnName);
        }

        private class Column {
            public string ClassName { get; set; } = default!;

            public string Name { get; set; } = default!;

            public string PropertyName {
                get {
                    string name = FixName(Name);

                    return name == ClassName
                        ? "_" + name
                        : name;
                }
            }

            public string PropertyType { get; set; } = default!;

            public bool IsPK { get; set; }

            public bool IsNullable { get; set; }

            public bool IsAutoIncrement { get; set; }
        }

        private class TableCollection : Collection<Table> {
            public Table this[string tableName] => this.Single(x => string.Compare(x.Name, tableName, true) == 0);
        }

        private abstract class TableLoader {

            protected TableLoader(string connectionString) {
                ConnectionString = connectionString;
            }

            protected string ConnectionString { get; }

            public abstract void LoadTables(TableCollection tables, ObservableCollection<CheckBoxTable> checkBoxTables);
        }

        private class SqlTableLoader : TableLoader {
            public SqlTableLoader(string connectionString) : base(connectionString) { }

            public override void LoadTables(TableCollection tables, ObservableCollection<CheckBoxTable> checkBoxTables) {
                tables.Clear();
                checkBoxTables.Clear();

                using SqlConnection conn = new(ConnectionString);
                conn.Open();

                DataTable dt = conn.GetSchema("Tables");
                DataTable colDt = conn.GetSchema("Columns");
                DataTable indexDt = conn.GetSchema("Indexes");
                DataTable pkColDt = conn.GetSchema("IndexColumns");

                foreach (DataRow dr in dt.Rows) {
                    Table table = new() {
                        Name = dr["TABLE_NAME"].ToString()!,
                        Schema = dr["TABLE_SCHEMA"].ToString()!,
                        IsView = string.Compare(dr["TABLE_TYPE"].ToString(), "View", true) == 0
                    };

                    tables.Add(table);
                    // 只有一個底線，WPF 畫面不會顯示
                    checkBoxTables.Add(new CheckBoxTable { Name = table.Name.Replace("_", "__") });
                }

                foreach (Table table in tables) {
                    table.Columns.AddRange(LoadColumns(colDt, table));

                    IEnumerable<string> primaryKeys = GetPk(indexDt, pkColDt, table.Name).ToList();
                    foreach (string primaryKey in primaryKeys) {
                        Column? pkColumn = table.Columns.SingleOrDefault(x => x.Name.ToLower().Trim() == primaryKey.ToLower().Trim());
                        if (pkColumn is not null) {
                            pkColumn.IsPK = true;
                        }
                    }
                }

                conn.Close();
            }

            private static IEnumerable<Column> LoadColumns(DataTable dataTable, Table table) {
                foreach (DataRow dr in dataTable.Rows) {
                    if (dr["TABLE_NAME"].ToString() == table.Name) {
                        Column col = new() {
                            ClassName = table.ClassName,
                            Name = dr["COLUMN_NAME"].ToString()!,
                            PropertyType = GetPropertyType(dr),
                            IsNullable = dr["IS_NULLABLE"].ToString() == "YES",
                            IsAutoIncrement = false
                        };

                        yield return col;
                    }
                }
            }

            private static string GetPropertyType(DataRow row) {
                string dataType = row["DATA_TYPE"].ToString()!.ToLower();
                return dataType switch {
                    "variant" => "object",
                    "varbinary" or "Binary" or "Timestamp" => "byte[]",
                    "uniqueidentifier" => "Guid",
                    "date" or "DateTime" or "DateTime2" or "TIMESTAMP WITH TIME ZONE" => "DateTime",
                    "datetimeoffset" => "DateTimeOffset",
                    "time" => "TimeSpan",
                    "real" => "float",
                    "float" => "double",
                    "decimal" or "Money" or "SmallMoney" => "decimal",
                    "bigint" => "long",
                    "int" => "int",
                    "smallint" => "short",
                    "tinyint" => "byte",
                    "bit" => "bool",
                    _ => "string",
                };
            }

            private static IEnumerable<string> GetPk(DataTable indexDataTable, DataTable colDataTabke, string tableName) {
                foreach (DataRow dr in indexDataTable.Rows) {
                    string? indexName = dr["INDEX_NAME"]?.ToString();
                    // HACK 暫時沒想到其他不下 SQL，又可以靠 GetSchema 取得 PK 的方法
                    if (dr["TABLE_NAME"].ToString() == tableName && indexName?.StartsWith("PK_") == true) {

                        foreach (DataRow colDr in colDataTabke.Rows) {
                            if (dr["TABLE_NAME"].ToString() == tableName && colDr["INDEX_NAME"].ToString() == indexName) {
                                yield return colDr["COLUMN_NAME"].ToString()!;
                            }
                        }

                        yield break;
                    }
                }
            }
        }

        private class OrableTableLoader : TableLoader {
            public OrableTableLoader(string connectionString) : base(connectionString) { }

            public override void LoadTables(TableCollection tables, ObservableCollection<CheckBoxTable> checkBoxTables) {
                tables.Clear();
                checkBoxTables.Clear();

                using OracleConnection conn = new(ConnectionString);
                conn.Open();

                string userId = Regex.Match(conn.ConnectionString, @"\b(?<=USER ID=)\w*\b", RegexOptions.IgnoreCase).Value.ToUpper();
                DataTable dt = conn.GetSchema("Tables", new string[] { userId });
                DataTable colDt = conn.GetSchema("Columns", new string[] { userId });
                DataTable pkDt = conn.GetSchema("PrimaryKeys", new string[] { userId });
                DataTable pkColDt = conn.GetSchema("IndexColumns", new string[] { userId });

                foreach (DataRow dr in dt.Rows) {
                    Table table = new() {
                        Name = dr["TABLE_NAME"].ToString()!,
                        Schema = dr["OWNER"].ToString()!,
                        IsView = string.Compare(dr["TYPE"].ToString(), "View", true) == 0
                    };

                    tables.Add(table);
                    // 只有一個底線，WPF 畫面不會顯示
                    checkBoxTables.Add(new CheckBoxTable { Name = table.Name.Replace("_", "__") });
                }

                foreach (Table table in tables) {
                    table.Columns.AddRange(LoadColumns(colDt, table));

                    IEnumerable<string> primaryKeys = GetPk(pkDt, pkColDt, table.Name).ToList();
                    foreach (string primaryKey in primaryKeys) {
                        Column? pkColumn = table.Columns.SingleOrDefault(x => x.Name.ToLower().Trim() == primaryKey.ToLower().Trim());
                        if (pkColumn is not null) {
                            pkColumn.IsPK = true;
                        }
                    }
                }

                conn.Close();
            }

            private static IEnumerable<Column> LoadColumns(DataTable dataTable, Table table) {
                foreach (DataRow dr in dataTable.Rows) {
                    if (dr["TABLE_NAME"].ToString() == table.Name) {
                        Column col = new() {
                            ClassName = table.ClassName,
                            Name = dr["COLUMN_NAME"].ToString()!,
                            PropertyType = GetPropertyType(dr),
                            IsNullable = dr["NULLABLE"].ToString() == "Y",
                            IsAutoIncrement = false
                        };

                        yield return col;
                    }
                }
            }

            private static string GetPropertyType(DataRow row) {
                string dataType = row["DATATYPE"].ToString()!;
                switch (dataType) {
                    case "BFILE":
                    case "BLOB":
                    case "LONG RAW":
                        return "byte[]";
                    case "RAW":
                        return "Guid";
                    case "DATE":
                    case "TIMESTAMP":
                    case "TIMESTAMP WITH LOCAL TIME ZONE":
                    case "TIMESTAMP WITH TIME ZONE":
                        return "DateTime";
                    case "FLOAT":
                        return "decimal";
                    case "INTEGER":
                    case "NUMBER":
                    case "UNSIGNED INTEGER":
                        if (!int.TryParse(row["PRECISION"].ToString(), out int precision)) {
                            precision = 38;
                        }

                        if (precision <= 0) {
                            return "decimal";
                        } else if (precision <= 5) {
                            return "short";
                        } else if (precision <= 10) {
                            return "int";
                        } else if (precision <= 19) {
                            return "long";
                        }
                        return "decimal";
                    case "INTERVAL YEAR TO MONTH":
                        return "int";
                    case "INTERVAL DAY TO SECOND":
                        return "TimeSpan";
                    default:
                        return "string";
                }
            }

            private static IEnumerable<string> GetPk(DataTable dataTable, DataTable colDataTabke, string tableName) {
                foreach (DataRow dr in dataTable.Rows) {
                    if (dr["TABLE_NAME"].ToString() == tableName) {
                        string pkName = dr["INDEX_NAME"].ToString()!;

                        foreach (DataRow colDr in colDataTabke.Rows) {
                            if (dr["TABLE_NAME"].ToString() == tableName && colDr["INDEX_NAME"].ToString() == "pkName") {
                                yield return colDr["COLUMN_NAME"].ToString()!;
                            }
                        }

                        yield break;
                    }
                }
            }
        }
    }
}
